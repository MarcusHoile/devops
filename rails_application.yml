---
- name: Create Droplet Ubuntu_14.04_x64 in ny3 on 512mb
  hosts: localhost
  connection: local
  gather_facts: false
  tags: create_droplet
  tasks:
  - name: Build ubuntu server from image
    digital_ocean: >
        state=present
        command=droplet
        name='{{ domain }}-web'
        size_id=66
        region_id=8
        image_id=9801950 
        wait_timeout=500
        private_networking=yes
        ssh_key_ids=685177,694943
        client_id=d6ed0c2657a7945a240e31934d56a866
        api_key=15fa777e0687f7834251af0cabadc7b7
    register: new_droplet

  - name: add host
    add_host: name="{{ new_droplet.droplet.ip_address }}" groups=just_created do_id={{ new_droplet.droplet.id }} 
  
  - local_action: wait_for host="{{ new_droplet.droplet.ip_address }}" port=22 delay=5 search_regex=OpenSSH
  - local_action: wait_for host="{{ new_droplet.droplet.ip_address }}" port=22 delay=25 search_regex=OpenSSH
  - command: ssh-keygen -f "/root/.ssh/known_hosts" -R {{ new_droplet.droplet.ip_address }}

  - name: Add new droplet to inventory file on ansible server and to appropriate groups
    tags: update_groups
    lineinfile:
      dest=/etc/ansible/hosts
      insertafter='rails_web'
      line='{{ new_droplet.droplet.ip_address }}'
      state=present

- name: Setup virtual memory
  hosts: just_created
  sudo: yes
  tasks:
  - command: mkdir /var/swap
  - command: fallocate -l 4G /var/swap/swapfile.1
  - command: chmod 600 /var/swap/swapfile.1
  - command: mkswap /var/swap/swapfile.1
  - command: swapon /var/swap/swapfile.1

- name: keys
  hosts: just_created
  sudo: yes
  tasks:
  - copy: src=templates/digitalocean.pem dest=.ssh/id_rsa owner=root group=root mode=400

# connect to the new host and start deployment    
- name: Database Deployment
  hosts: just_created
  sudo: yes
  tasks:
  # add postgres key and repo
  - apt_key: url=http://apt.postgresql.org/pub/repos/apt/ACCC4CF8.asc state=present
  - apt_repository: >
      repo='deb http://apt.postgresql.org/pub/repos/apt/ trusty-pgdg main' 
      state=present 
      validate_certs=no

  # refresh and update
  - apt: update_cache=yes
  - apt: upgrade=dist 
  - apt: name=python-psycopg2 state=present
  # postgres and utilities
  - apt: name=postgresql-9.3 state=present
  - apt: name=postgresql-client-9.3 state=present
  - apt: name=postgresql-contrib-9.3 state=present
  #- apt: name=postgres-xc state=present
  

# reconnect as postgres for database setup
- name: Postgres Setup
  hosts: just_created
  sudo: True
  sudo_user: postgres
  tasks:
  # create databases
  - postgresql_db: >
      name=product_distribution_production  
      encoding='UTF-8'      
  # set admin password, create rails user, grant privileges
  - postgresql_user: > 
      name=postgres 
      password=Pr0duct 
  - postgresql_user: > 
      name=rails
      password=Pr0duct
      role_attr_flags=SUPERUSER
  - postgresql_privs: >
      database=product_distribution_production
      state=present
      privs=ALL
      type=schema
      objs=public
      roles=rails
      grant_option=yes
  - lineinfile: dest=/etc/postgresql/9.3/main/postgresql.conf line="listen_addresses = 'localhost'" insertafter="listen_addresses" state=present
  - shell: service postgresql restart

# connect to the new host and start deployment    
- name: install rvm ruby rails
  hosts: just_created
  sudo: yes
  tags: create_droplet
  vars:
    # ruby_version: '2.1.4'
    # ruby_path: /opt/rubies/ruby-{{ ruby_version }}/bin
    git_branch: 'master'
    # Install 1 or more versions of ruby
    rvm1_rubies:
      - 'ruby-2.1.4'
    
    # Delete a specific version of ruby (ie. ruby-2.1.0)
    rvm1_delete_ruby:
    
    # Install path for rvm (defaults to system wide)
    rvm1_install_path: '/usr/local/rvm'
    
    # Add or remove any install flags
    # NOTE: If you are doing a USER BASED INSTALL then
    #       make sure you ADD the --user-install flag below
    rvm1_install_flags: '--auto-dotfiles'
    
    # Set the owner for the rvm directory
    rvm1_user: 'root'
    
    # URL for the latest installer script
    rvm1_rvm_latest_installer: 'https://raw.githubusercontent.com/wayneeseguin/rvm/master/binscripts/rvm-installer'
    
    # rvm version to use
    rvm1_rvm_version: 'stable'
    
    # Check and update rvm, disabling this will force rvm to never update
    rvm1_rvm_check_for_updates: True
    
    # GPG key verification, use an empty string if you want to skip this
    # Note: Unless you know what you're doing, just keep it as is
    #           Identity proof: https://keybase.io/mpapis
    #           PGP message: https://rvm.io/mpapis.asc
    rvm1_gpg_keys: 'D39DC0E3'
    
    # The GPG key server
    rvm1_gpg_key_server: 'hkp://keys.gnupg.net'
    
    # autolib mode, see https://rvm.io/rvm/autolibs
    rvm1_autolib_mode: 3
    rvm1_temp_download_path: '/tmp'

    rvm1_default_ruby_version: '{{ rvm1_rubies | last if rvm1_rubies and rvm1_rubies is iterable else "" }}'
    
    rvm1_rvm: '{{ rvm1_install_path }}/bin/rvm'
    
    rvm1_symlink_binaries:
      - 'bundle'
      - 'bundler'
      - 'erb'
      - 'executable-hooks-uninstaller'
      - 'gem'
      - 'irb'
      - 'rake'
      - 'rdoc'
      - 'ri'
      - 'ruby'
      - 'testrb'
    
    rvm1_symlink_to: '/usr/local/bin'
    # password: $1o1YusV7CFKw
  tasks:
  # install a private key as root's identity, to give this new machine access to everything else
  # - copy: src=digitalocean.pem dest=/root/.ssh/id_rsa owner=root group=root mode=400

  - name: install apps and dependencies on server
    apt: name={{ item }} state=present
    with_items:
      - git-core
      - python-software-properties
      - zlib1g-dev
      - build-essential
      - libssl-dev
      - libreadline-dev
      - libyaml-dev
      - libxml2-dev
      - nodejs
      - libxslt1-dev
      - libcurl4-openssl-dev
      - libpq-dev
      - memcached
      - nginx

  - name: Detect rvm binary
    stat: path='{{ rvm1_rvm }}'
    register: rvm_binary

  - name: Detect rvm installer
    stat: path='{{ rvm1_temp_download_path }}/rvm-installer.sh'
    register: rvm_installer
  
  - name: Detect current rvm version
    command: '{{ rvm1_rvm}} version'
    changed_when: False
    register: rvm_current_version
    when: rvm_binary.stat.exists
  
  - name: Install rvm installer
    get_url:
      url: '{{ rvm1_rvm_latest_installer }}'
      dest: '{{ rvm1_temp_download_path }}/rvm-installer.sh'
    when: not rvm_installer.stat.exists
  
  - name: Configure rvm installer
    file:
      path: '{{ rvm1_temp_download_path }}/rvm-installer.sh'
      mode: 0755
    when: not rvm_binary.stat.exists
  
  - name: Import GPG keys
    command: 'gpg --keyserver {{ rvm1_gpg_key_server }} --recv-keys {{ rvm1_gpg_keys }}'
    changed_when: False
    when: rvm1_gpg_keys != ''
  
  - name: Install rvm
    command: >
      {{ rvm1_temp_download_path }}/rvm-installer.sh {{ rvm1_rvm_version }}
      --path {{ rvm1_install_path }} {{ rvm1_install_flags }}
    when: not rvm_binary.stat.exists
  
  - name: Update rvm
    shell: '{{ rvm1_rvm }} get {{ rvm1_rvm_version }} && {{ rvm1_rvm }} reload'
    changed_when: False
    when: rvm_binary.stat.exists and rvm1_rvm_check_for_updates
  
  - name: Configure rvm
    command: '{{ rvm1_rvm }} autolibs {{ rvm1_autolib_mode }}'
    when: not rvm_binary.stat.exists

  - name: Detect if rubies are installed
    command: '{{ rvm1_rvm }} {{ item }} do true'
    changed_when: False
    failed_when: False
    register: detect_rubies
    with_items: rvm1_rubies
    when: rvm1_rubies
  
  - name: Install rubies
    command: '{{ rvm1_rvm }} install {{ item.item }}'
    when: rvm1_rubies and item.rc != 0
    with_items: detect_rubies.results
    sudo_user: '{{ rvm1_user }}'
  
  - name: Detect default ruby version
    command: '{{ rvm1_rvm }} alias list default'
    changed_when: False
    register: detect_default_ruby_version
  
  - name: Select default ruby
    command: '{{ rvm1_rvm }} alias create default {{ rvm1_default_ruby_version }}'
    when: detect_default_ruby_version.stdout == '' or
          rvm1_default_ruby_version not in detect_default_ruby_version.stdout
  
  - name: Symlink ruby related binaries on the system path
    file:
      state: 'link'
      src: '{{ rvm1_install_path }}/wrappers/default/{{ item }}'
      dest: '{{ rvm1_symlink_to }}/{{ item }}'
      owner: 'root'
      group: 'root'
    when: not '--user-install' in rvm1_install_flags
    with_items: rvm1_symlink_binaries

  - name: install bundler
    shell: gem install bundler

  - name: setup git
    copy: src=templates/gitconfig dest=/root/.gitconfig

- name: Create alias to navigate to application directory
  hosts: just_created
  tasks:
  - name: create alias file
    file: path=/root/.bash_aliases owner=root  state=touch mode=0644

  - name: Setup alias to go to application directory
    shell: echo 'alias cdapp="cd /var/www/product_distribution/"' >> ~/.bash_aliases

- name: Setup rails for production environment with unicorn and nginx
  hosts: just_created
  gather_facts: false
  tags: 
    - rails
    - core_app
  vars:
    ruby_version: '2.1.4'
    new_app: true
  roles:
    - rails

- name: Update rails core apps
  hosts: rails_web
  gather_facts: false
  tags: 
    - update
  vars:
    ruby_version: '2.1.4'
    new_app: false
  roles:
    - rails
 

- name: Setup rails app for service instances
  hosts: services
  sudo: no
  tags:
    - service
    - update
  tasks:
  - name: download repo
    git: repo=git@github.com:MarcusHoile/product-distribution.git
         dest=product-distribution
         accept_hostkey=yes
         version=master

  - name: update database config
    copy: >
      src=templates/product-distribution/database.yml
      dest=product-distribution/config

  - name: install dependencies
    shell: cd product-distribution; bundle install
    sudo: no

- name: restart bunny
  hosts: services
  sudo: no
  vars:
    ruby_version: '2.1.4'
  tags:
    - restart
  tasks:
  - name: Kill the current bunny screen
    command: screen -X -S livescoresListener quit
    tags: update
    when: new_droplet is not defined

  - name: Create a new bunny session on a detached screen
    tags: 
      - service
      - update
    shell: RAILS_ENV={{ env | default('production') }} screen -d -m -S livescoresListener ruby lib/message_queue.rb -d
    args:
      chdir: "{{ release_path.stdout | default('product-distribution') }}"


- name: restart delayed job
  hosts: services
  sudo: no
  tags:
    - service
    - restart
    - update
  vars:
    ruby_version: '2.1.4'
  tasks:
  - name: restart delayed job  
    shell: RAILS_ENV={{ env | default('production') }} bin/delayed_job restart 
    args:
      chdir: "{{ release_path.stdout | default('product-distribution') }}"

- name: Clean up releases keep to 5
  hosts: rails_web
  tags: 
    - update
  tasks:
  # get the amount of old releases 
  - name: get release count
    shell: ls /var/www/product-distribution/releases | wc -l
    register: release_count
    changed_when: false

  # if release_count over 5, remove directories older
  - name: remove old releases
    sudo: yes
    when: release_count.stdout|int >= 5
    shell: cutoff=`ls -t /var/www/product-distribution/releases/ | head -5 | tail -1`; find /var/www/product-distribution/releases -maxdepth 1 ! -newer /var/www/product-distribution/releases/$cutoff -exec rm -rf '{}' \;
    

